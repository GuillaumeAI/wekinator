/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wekimini.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS;
import javax.swing.Timer;
import weka.core.Instance;
import wekimini.Wekinator;
import wekimini.gui.PlotFrame.PlotRowModel;
import wekimini.modifiers.Feature;

/**
 *
 * @author louismccallum
 */
public class FeatureDetailPanel extends javax.swing.JPanel {

    private PlotPanel plotPanel;
    private final int REFRESH_RATE = 20;
    private PlotRowModel model;
    private Wekinator w;
    
    public FeatureDetailPanel() {
        initComponents();
        plotPanel = new PlotPanel();        
        plotScrollPane.setViewportView(plotPanel);
        plotScrollPane.setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_ALWAYS);
    }
    
    public void update(Wekinator w)
    {
        this.w = w;
        Timer timer = new Timer(REFRESH_RATE, new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            Instance in = w.getSupervisedLearningManager().getCurrentInputInstance();
            if(in != null)
            {
                if(model.isStreaming)
                {
                    float val = (float) in.value(model.featureIndex);
                    //System.out.print("adding " + val + " to model " + model.featureIndex);
                    model.addPoint(val);
                }
            }
        }    
        });  
        timer.start();
    }
    
    public void setModel(PlotRowModel model)
    {
        this.model = model;
        plotPanel.updateModel(model);
        
        plotPanel.updateWidth(model.isStreaming);
        repaint();
        plotScrollPane.revalidate();
        validate();
        plotScrollPane.setViewportView(plotPanel);
        plotScrollPane.revalidate();
        validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plotScrollPane = new javax.swing.JScrollPane();
        titleLabel = new javax.swing.JLabel();

        titleLabel.setText("title");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(plotScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 179, Short.MAX_VALUE))
            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plotScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane plotScrollPane;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
