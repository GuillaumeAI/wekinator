/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wekimini.gui;

import java.awt.CardLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTextField;
import wekimini.Wekinator;
import wekimini.osc.OSCReceiver;
import wekimini.util.Util;
import wekimini.util.WeakListenerSupport;

/**
 *
 * @author rebecca
 */
public class InitInputOutput extends javax.swing.JPanel {

    private Wekinator w = null;
    private PropertyChangeListener oscReceiverListener = null;
    private final WeakListenerSupport wls = new WeakListenerSupport();
    private String[] currentInputNames = new String[0];
    private String[] currentOutputNames = new String[0];

    private final static int COMBO_REGRESSION_INDEX = 0;
    private final static int COMBO_CLASSIFICATION_INDEX = 1;
    private final static int COMBO_CUSTOM_INDEX = 2;
    private final static int COMBO_FILE_INDEX = 3;

    /**
     * Creates new form GUIOscInputConfigure
     */
    public InitInputOutput() {
        initComponents();
    }

    public InitInputOutput(Wekinator w) {
        initComponents();
        setWekinator(w);
        updateOutputCard();
    }

    public void setWekinator(Wekinator w) {
        this.w = w;
        updateGUIForConnectionState(w.getOSCReceiver().getConnectionState());
        oscReceiverListener = this::oscReceiverPropertyChanged;
        w.getOSCReceiver().addPropertyChangeListener(wls.propertyChange(oscReceiverListener));
    }

    private void updateGUIForConnectionState(OSCReceiver.ConnectionState cs) {
        if (cs == OSCReceiver.ConnectionState.CONNECTED) {
            labelOscStatus.setText("Connected on port " + w.getOSCReceiver().getReceivePort());
            buttonOscListen.setText("Disconnect");
            //  buttonNext.setEnabled(true);
        } else if (cs == OSCReceiver.ConnectionState.FAIL) {
            labelOscStatus.setText("Failed to connect");
            buttonOscListen.setText("Connect");
            //  buttonNext.setEnabled(false);
        } else if (cs == OSCReceiver.ConnectionState.NOT_CONNECTED) {
            labelOscStatus.setText("Not connected");
            buttonOscListen.setText("Connect");
            //  buttonNext.setEnabled(false);
        } else if (cs == OSCReceiver.ConnectionState.CONNECTING) {
            labelOscStatus.setText("Connecting...");
            buttonOscListen.setText("Disconnect");
            //  buttonNext.setEnabled(false);
        }
    }

    private void oscReceiverPropertyChanged(PropertyChangeEvent evt) {
        if (evt.getPropertyName() == OSCReceiver.PROP_CONNECTIONSTATE) {
            updateGUIForConnectionState((OSCReceiver.ConnectionState) evt.getNewValue());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fieldOscPort = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        buttonOscListen = new javax.swing.JButton();
        labelOscStatus = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        fieldNumInputs = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldInputOSCMessage = new javax.swing.JTextField();
        buttonLoadInputsFromFile = new javax.swing.JButton();
        buttonCustomiseInputNames = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        fieldNumOutputs = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        fieldOutputOSCMessage = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        comboOutputType = new javax.swing.JComboBox();
        panelOutputTypes = new javax.swing.JPanel();
        cardBlank = new javax.swing.JPanel();
        cardChooseFile = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        buttonChooseOutputFile = new javax.swing.JButton();
        cardNumClasses = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        fieldNumClasses = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        buttonCustomiseOutputNames = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        fieldHostName = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        fieldSendPort = new javax.swing.JTextField();
        buttonNext = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Receiving OSC"));

        jLabel1.setText("Wekinator listening for inputs and control on port:");

        fieldOscPort.setText("6458");
        fieldOscPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldOscPortActionPerformed(evt);
            }
        });
        fieldOscPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldOscPortKeyTyped(evt);
            }
        });

        jLabel2.setText("Status:");

        buttonOscListen.setText("Start listening");
        buttonOscListen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOscListenActionPerformed(evt);
            }
        });

        labelOscStatus.setText("Not connected");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonOscListen)
                        .addGap(250, 250, 250))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelOscStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldOscPort, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(labelOscStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fieldOscPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonOscListen)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        jLabel3.setText("# inputs:");

        fieldNumInputs.setText("5");
        fieldNumInputs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldNumInputsKeyTyped(evt);
            }
        });

        jLabel4.setText("OSC message name:");

        fieldInputOSCMessage.setText("/wek/inputs");
        fieldInputOSCMessage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldInputOSCMessageFocusLost(evt);
            }
        });
        fieldInputOSCMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldInputOSCMessageActionPerformed(evt);
            }
        });
        fieldInputOSCMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldInputOSCMessageKeyTyped(evt);
            }
        });

        buttonLoadInputsFromFile.setText("Configure from file");
        buttonLoadInputsFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadInputsFromFileActionPerformed(evt);
            }
        });

        buttonCustomiseInputNames.setText("Customise names");
        buttonCustomiseInputNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCustomiseInputNamesActionPerformed(evt);
            }
        });

        jLabel11.setText("Optional:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldInputOSCMessage))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldNumInputs, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)
                        .addGap(0, 0, 0)
                        .addComponent(buttonCustomiseInputNames)
                        .addGap(0, 0, 0)
                        .addComponent(buttonLoadInputsFromFile)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fieldInputOSCMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldNumInputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(buttonCustomiseInputNames)
                    .addComponent(buttonLoadInputsFromFile))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Outputs"));

        jLabel5.setText("# outputs:");

        fieldNumOutputs.setText("5");
        fieldNumOutputs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldNumOutputsKeyTyped(evt);
            }
        });

        jLabel6.setText("OSC message name:");

        fieldOutputOSCMessage.setText("/wek/outputs");
        fieldOutputOSCMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldOutputOSCMessageActionPerformed(evt);
            }
        });

        jLabel7.setText("Output types:");

        comboOutputType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All continuous (default settings)", "All classifiers (default settings)", "Customise outputs on next screen", "Load from file" }));
        comboOutputType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOutputTypeActionPerformed(evt);
            }
        });

        panelOutputTypes.setLayout(new java.awt.CardLayout());

        cardBlank.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout cardBlankLayout = new javax.swing.GroupLayout(cardBlank);
        cardBlank.setLayout(cardBlankLayout);
        cardBlankLayout.setHorizontalGroup(
            cardBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );
        cardBlankLayout.setVerticalGroup(
            cardBlankLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        panelOutputTypes.add(cardBlank, "cardBlank");

        cardChooseFile.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setText("No file chosen.");

        buttonChooseOutputFile.setText("Choose file");

        javax.swing.GroupLayout cardChooseFileLayout = new javax.swing.GroupLayout(cardChooseFile);
        cardChooseFile.setLayout(cardChooseFileLayout);
        cardChooseFileLayout.setHorizontalGroup(
            cardChooseFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardChooseFileLayout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .addComponent(buttonChooseOutputFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        cardChooseFileLayout.setVerticalGroup(
            cardChooseFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardChooseFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonChooseOutputFile)
                .addComponent(jLabel8))
        );

        panelOutputTypes.add(cardChooseFile, "cardChooseFile");

        cardNumClasses.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setText("with");

        fieldNumClasses.setText("5");
        fieldNumClasses.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldNumClassesKeyTyped(evt);
            }
        });

        jLabel10.setText("classes");

        javax.swing.GroupLayout cardNumClassesLayout = new javax.swing.GroupLayout(cardNumClasses);
        cardNumClasses.setLayout(cardNumClassesLayout);
        cardNumClassesLayout.setHorizontalGroup(
            cardNumClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardNumClassesLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldNumClasses, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addContainerGap(318, Short.MAX_VALUE))
        );
        cardNumClassesLayout.setVerticalGroup(
            cardNumClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardNumClassesLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(cardNumClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(fieldNumClasses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)))
        );

        panelOutputTypes.add(cardNumClasses, "cardClassification");

        jLabel12.setText("Optional:");

        buttonCustomiseOutputNames.setText("Customise names");
        buttonCustomiseOutputNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCustomiseOutputNamesActionPerformed(evt);
            }
        });

        jLabel13.setText("Host (IP address or name):");

        fieldHostName.setText("255.255.255.255");

        jLabel14.setText("Port:");

        fieldSendPort.setText("12000");
        fieldSendPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldSendPortKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelOutputTypes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldOutputOSCMessage))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldHostName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldSendPort, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldNumOutputs, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonCustomiseOutputNames))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboOutputType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(fieldOutputOSCMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(fieldHostName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldSendPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(fieldNumOutputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(buttonCustomiseOutputNames))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(comboOutputType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelOutputTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        buttonNext.setText("Next");
        buttonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonNext)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(buttonNext)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fieldOscPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldOscPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldOscPortActionPerformed

    private void buttonOscListenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOscListenActionPerformed
        if (w.getOSCReceiver().getConnectionState()
                == OSCReceiver.ConnectionState.CONNECTED) {
            w.getOSCReceiver().stopListening();
        } else {
            int port = 0;
            try {
                port = Integer.parseInt(fieldOscPort.getText());
            } catch (NumberFormatException ex) {
                Util.showPrettyErrorPane(this, "Port must be a valid integer greater than 0");
                return;
            }
            if (port <= 0) {
                Util.showPrettyErrorPane(this, "Port must be a valid integer greater than 0");
                return;
            }

            w.getOSCReceiver().startListening(port);
        }
    }//GEN-LAST:event_buttonOscListenActionPerformed

    private void fieldOscPortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldOscPortKeyTyped
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldOscPortKeyTyped

    private void fieldInputOSCMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldInputOSCMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldInputOSCMessageActionPerformed

    private void buttonLoadInputsFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadInputsFromFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonLoadInputsFromFileActionPerformed

    private boolean checkInputNumberValid() {
        return Util.checkIsPositiveNumber(fieldNumInputs, "Number of inputs", this);
    }

    private void buttonCustomiseInputNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCustomiseInputNamesActionPerformed
        //String = fieldNumInputs.ge
        if (!checkInputNumberValid()) {
            return;
        }
        int numNames = Integer.parseInt(fieldNumInputs.getText());

        GuiIONameCustomise.NamesListReceiver r = new GuiIONameCustomise.NamesListReceiver() {
            @Override
            public void setNames(String[] names) {
                receivedNewInputNames(names);
            }
        };

        String baseName = setBaseNameFromOscField(fieldInputOSCMessage, "Input");
        GuiIONameCustomise customiser = new GuiIONameCustomise(
                numNames,
                baseName,
                currentInputNames,
                r,
                GuiIONameCustomise.IOType.INPUT);
        customiser.setAlwaysOnTop(true);
        customiser.setVisible(true);
    }//GEN-LAST:event_buttonCustomiseInputNamesActionPerformed

    private String setBaseNameFromOscField(JTextField f, String defaultName) {
        String currentInputOSC = f.getText().trim();
        String baseName = defaultName;
        if (currentInputOSC.length() > 0) {
            if (!currentInputOSC.contains("/")) {
                baseName = currentInputOSC;
            } else {
                String[] s = currentInputOSC.split("/");
                if (s.length > 0 && s[s.length - 1].length() > 0) {
                    baseName = s[s.length - 1];
                }
            }
        }
        return baseName;
    }

    private void receivedNewInputNames(String[] names) {
        System.out.println("YAY");
        currentInputNames = new String[names.length];
        System.arraycopy(names, 0, currentInputNames, 0, names.length);
    }

    private void receivedNewOutputNames(String[] names) {
        System.out.println("YAY OUTPUT");
        currentOutputNames = new String[names.length];
        System.arraycopy(names, 0, currentOutputNames, 0, names.length);
    }

    private void fieldOutputOSCMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldOutputOSCMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldOutputOSCMessageActionPerformed

    private void comboOutputTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOutputTypeActionPerformed
        updateOutputCard();
    }//GEN-LAST:event_comboOutputTypeActionPerformed

    private void buttonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextActionPerformed
        //TODO: have to do more if configuringOSC on next screen...
        if (checkOSCReady() && checkInputReady() && checkOutputReady()) {
            System.out.println("READY TO GO");
        } else {
            System.out.println("ERROR SOMEWHERE");
        }
    }//GEN-LAST:event_buttonNextActionPerformed

    private boolean checkOSCReady() {
        boolean ready = (w != null && w.getOSCReceiver().getConnectionState() == OSCReceiver.ConnectionState.CONNECTED);
        if (!ready) {
            Util.showPrettyErrorPane(this, "Please start OSC listener above in order to proceed");
        }
        return ready;
    }

    private boolean checkInputReady() {
        return checkInputNumberValid() && checkOscInputValid();
    }

    private boolean checkOscInputValid() {
        boolean notBlank = Util.checkNotBlank(fieldInputOSCMessage, "Input OSC message", this);
        if (notBlank) {
            return Util.checkNoSpace(fieldInputOSCMessage, "Input OSC message", this);
        } else {
            return false;
        }
    }

    private boolean checkOutputReady() {
        boolean ok = checkOutputNumberValid() && checkOutputHostValid() && checkOutputPortValid() && checkOutputOSCValid();
        if (!ok) {
            return false;
        }
        int index = comboOutputType.getSelectedIndex();
        if (index == COMBO_CLASSIFICATION_INDEX) {
            return Util.checkIsPositiveNumber(fieldNumClasses, "Number of classes", this);
        } else if (index == COMBO_FILE_INDEX) {
            Util.showPrettyErrorPane(this, "Loading from a file is not yet supported");
            return false;
        }
        return true;
    }

    private void buttonCustomiseOutputNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCustomiseOutputNamesActionPerformed
        if (!Util.checkIsPositiveNumber(fieldNumOutputs, "Number of outputs", this)) {
            return;
        }
        int numNames = Integer.parseInt(fieldNumOutputs.getText());

        GuiIONameCustomise.NamesListReceiver r = new GuiIONameCustomise.NamesListReceiver() {
            @Override
            public void setNames(String[] names) {
                receivedNewOutputNames(names);
            }
        };

        String baseName = setBaseNameFromOscField(fieldOutputOSCMessage, "Output");
        GuiIONameCustomise customiser = new GuiIONameCustomise(
                numNames,
                baseName,
                currentOutputNames,
                r,
                GuiIONameCustomise.IOType.OUTPUT);
        customiser.setAlwaysOnTop(true);
        customiser.setVisible(true);

    }//GEN-LAST:event_buttonCustomiseOutputNamesActionPerformed

    private void fieldNumInputsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldNumInputsKeyTyped
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldNumInputsKeyTyped

    private void fieldSendPortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldSendPortKeyTyped
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldSendPortKeyTyped

    private void fieldNumOutputsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldNumOutputsKeyTyped
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldNumOutputsKeyTyped

    private void fieldNumClassesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldNumClassesKeyTyped
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldNumClassesKeyTyped

    private void fieldInputOSCMessageFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldInputOSCMessageFocusLost
        updateOSCListener();
    }//GEN-LAST:event_fieldInputOSCMessageFocusLost

    private void updateOSCListener() {
        //TODO
    }

    private void fieldInputOSCMessageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldInputOSCMessageKeyTyped
        /* char enter = evt.getKeyChar();
        
         if (enter == '\n') {
         System.out.println("One");
         } else if (enter == '\r') {
         System.out.println("two");
         } else {
         System.out.println("Other: " + enter + ".");
         }
         */
        /* if (keyIsEnter) {
         updateOSCListener();
         }*/

    }//GEN-LAST:event_fieldInputOSCMessageKeyTyped

    private void updateOutputCard() {
        int index = comboOutputType.getSelectedIndex();
        CardLayout layout = (CardLayout) panelOutputTypes.getLayout();
        if (index == COMBO_REGRESSION_INDEX) {
            layout.show(panelOutputTypes, "cardBlank");
        } else if (index == COMBO_CLASSIFICATION_INDEX) {
            layout.show(panelOutputTypes, "cardClassification");
        } else if (index == COMBO_FILE_INDEX) {
            layout.show(panelOutputTypes, "cardChooseFile");
        } else {
            layout.show(panelOutputTypes, "cardBlank");
        }
    }

    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame f = new JFrame();
                f.setSize(500, 500);
                Wekinator w;
                try {
                    w = new Wekinator();
                    InitInputOutput p = new InitInputOutput(w);
                    f.add(p);
                    f.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(InitInputOutput.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SecurityException ex) {
                    Logger.getLogger(InitInputOutput.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonChooseOutputFile;
    private javax.swing.JButton buttonCustomiseInputNames;
    private javax.swing.JButton buttonCustomiseOutputNames;
    private javax.swing.JButton buttonLoadInputsFromFile;
    private javax.swing.JButton buttonNext;
    private javax.swing.JButton buttonOscListen;
    private javax.swing.JPanel cardBlank;
    private javax.swing.JPanel cardChooseFile;
    private javax.swing.JPanel cardNumClasses;
    private javax.swing.JComboBox comboOutputType;
    private javax.swing.JTextField fieldHostName;
    private javax.swing.JTextField fieldInputOSCMessage;
    private javax.swing.JTextField fieldNumClasses;
    private javax.swing.JTextField fieldNumInputs;
    private javax.swing.JTextField fieldNumOutputs;
    private javax.swing.JTextField fieldOscPort;
    private javax.swing.JTextField fieldOutputOSCMessage;
    private javax.swing.JTextField fieldSendPort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel labelOscStatus;
    private javax.swing.JPanel panelOutputTypes;
    // End of variables declaration//GEN-END:variables

    private boolean checkOutputNumberValid() {
        return Util.checkIsPositiveNumber(fieldNumOutputs, "Number of outputs", this);
    }

    private boolean checkOutputHostValid() {
        boolean isNotBlank = Util.checkNotBlank(fieldHostName, "host name", this);
        if (!isNotBlank) {
            return false;
        }

        String hostname = fieldHostName.getText().trim();
        try {
            InetAddress address = InetAddress.getByName(hostname);
        } catch (UnknownHostException ex) {
            Util.showPrettyErrorPane(this, "Invalid OSC output hostname");
            return false;
        }
        return true;
    }

    private boolean checkOutputPortValid() {
        return Util.checkIsPositiveNumber(fieldSendPort, "OSC output port", this);
    }

    private boolean checkOutputOSCValid() {
        if (!Util.checkNotBlank(fieldOutputOSCMessage, "OSC output message", this)) {
            return false;
        }
        return Util.checkNoSpace(fieldOutputOSCMessage, "OSC output message", this);
    }
}
